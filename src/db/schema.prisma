// Unified Schema with Auth Database Separation
// Auth tables will be deployed to separate database via configuration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// =============================================================================
// AUTHENTICATION & AUTHORIZATION MODELS (Deploy to AUTH_DATABASE)
// =============================================================================

model User {
  id             Int       @id @default(autoincrement()) @map("user_id")
  email          String    @unique @db.VarChar(100)
  username       String?   @unique @db.VarChar(50)
  hashedPassword String    @map("hashed_password") @db.VarChar(255)
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  userRoles UserRole[]

  @@index([email])
  @@index([username])
  @@map("auth.user")
}

model Role {
  id          Int      @id @default(autoincrement()) @map("role_id")
  name        String   @unique @map("role_name") @db.VarChar(50)
  description String?  @map("role_description") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles UserRole[]

  @@index([name])
  @@map("auth.role")
}

model UserRole {
  id        Int      @id @default(autoincrement()) @map("user_role_id")
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("auth.user_role")
}

// =============================================================================
// CORE BUSINESS MODELS (Deploy to MAIN_DATABASE)
// =============================================================================

model Membership {
  id          Int      @id @default(autoincrement()) @map("membership_id")
  name        String   @map("membership_name") @db.VarChar(30)
  description String   @map("membership_description") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  services      Service[]
  subscriptions MemberSubscription[]
  programs      Program[]

  @@map("main.membership")
}

model Service {
  id           Int      @id @default(autoincrement()) @map("service_id")
  membershipId Int      @map("membership_id")
  name         String   @map("service_name") @db.VarChar(30)
  availability String   @map("service_availability") @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
  @@map("main.service")
}

model Person {
  id            Int      @id @default(autoincrement()) @map("person_id")
  userId        Int?     @unique @map("user_id") // Links to auth.user
  firstName     String   @map("first_name") @db.VarChar(30)
  middleName    String?  @map("middle_name") @db.VarChar(30)
  lastName      String   @map("last_name") @db.VarChar(30)
  gender        String   @db.VarChar(10)
  dateOfBirth   DateTime @map("date_of_birth") @db.Date
  phone         String?  @db.VarChar(15)
  personalEmail String?  @map("personal_email") @db.VarChar(50)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Member-specific fields (nullable for non-members)
  dateOfApplication  DateTime? @map("date_of_application") @db.Date
  appliedMembership  String?   @map("applied_membership") @db.VarChar(30)
  monthOfApplication String?   @map("month_of_application") @db.VarChar(15)

  // Relations
  subscriptions   MemberSubscription[]
  preferenceLog   MemberStandardPreferenceLog[]
  createdPrograms Program[]                     @relation("ProgramCreator")
  enrollments     Enrollment[]
  progressLogs    ProgressLog[]
  activityLogs    ActivityLog[]

  @@index([userId])
  @@index([isActive])
  @@map("main.person")
}

model MemberSubscription {
  id           Int      @id @default(autoincrement()) @map("subscription_id")
  personId     Int      @map("person_id")
  membershipId Int      @map("membership_id")
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  status       String   @default("ACTIVE") @map("subscription_status") @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  person     Person     @relation(fields: [personId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id])

  @@index([personId])
  @@index([membershipId])
  @@index([status])
  @@map("main.member_subscription")
}

model MemberStandardPreferenceLog {
  id                   Int      @id @default(autoincrement()) @map("preference_log_id")
  personId             Int      @map("person_id")
  goals                String   @db.Text
  recordedAvailability String   @map("recorded_availability") @db.VarChar(20)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@map("main.member_preference_log")
}

model Program {
  id           Int      @id @default(autoincrement()) @map("program_id")
  creatorId    Int      @map("creator_id")
  membershipId Int?     @map("membership_id")
  name         String   @map("program_name") @db.VarChar(50)
  description  String   @map("program_description") @db.Text
  type         String   @map("program_type") @db.VarChar(20) // "STANDARD" or "PERSONALIZED"
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  creator     Person       @relation("ProgramCreator", fields: [creatorId], references: [id])
  membership  Membership?  @relation(fields: [membershipId], references: [id])
  enrollments Enrollment[]

  @@index([creatorId])
  @@index([membershipId])
  @@index([type])
  @@index([isActive])
  @@map("main.program")
}

model Enrollment {
  id        Int      @id @default(autoincrement()) @map("enrollment_id")
  personId  Int      @map("person_id")
  programId Int      @map("program_id")
  goals     String   @db.Text
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  person       Person        @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program      Program       @relation(fields: [programId], references: [id], onDelete: Cascade)
  progressLogs ProgressLog[]

  @@index([personId])
  @@index([programId])
  @@index([isActive])
  @@map("main.enrollment")
}

model ProgressLog {
  id           Int      @id @default(autoincrement()) @map("progress_log_id")
  personId     Int      @map("person_id")
  enrollmentId Int      @map("enrollment_id")
  progress     String   @db.Text
  loggedAt     DateTime @default(now()) @map("logged_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  person     Person     @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([enrollmentId])
  @@index([loggedAt])
  @@map("main.progress_log")
}

model ActivityLog {
  id           Int      @id @default(autoincrement())
  personId     Int      @map("person_id") // Links to person, not user
  activityType String   @map("activity_type") @db.VarChar(50) // e.g., "WORKOUT", "CHECKIN", "PROGRAM_START"
  activityName String   @map("activity_name") @db.VarChar(100)
  description  String?  @db.Text
  duration     Int?     @map("duration_minutes") // For workouts, sessions, etc.
  calories     Int?     @map("calories_burned")
  notes        String?  @db.Text
  recordedAt   DateTime @default(now()) @map("recorded_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([activityType])
  @@index([recordedAt])
  @@map("main.activity_log")
}
