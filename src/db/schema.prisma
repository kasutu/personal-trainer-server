generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Enums are not supported in SQL Server with Prisma, so use String fields instead.
// Remove enum definitions and ensure all model fields use String with @db.VarChar.

model Membership {
  id          Int      @id @default(autoincrement()) @map("membership_id")
  name        String   @map("membership_name") @db.VarChar(30)
  description String   @map("membership_description") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  services            Service[]
  memberSubscriptions MemberSubscription[]
  standardPrograms    StandardProgram[]

  @@map("membership")
}

model Service {
  id           Int      @id @default(autoincrement()) @map("service_id")
  membershipId Int      @map("membership_id")
  name         String   @map("service_name") @db.VarChar(30)
  availability String   @map("service_availability") @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
  @@map("service")
}

model MemberRegistration {
  id                 Int      @id @default(autoincrement()) @map("registration_id")
  firstName          String   @map("first_name") @db.VarChar(30)
  middleName         String?  @map("middle_name") @db.VarChar(30)
  lastName           String   @map("last_name") @db.VarChar(30)
  gender             String   @db.VarChar(10)
  dateOfBirth        DateTime @map("date_of_birth") @db.Date
  email              String   @unique @db.VarChar(50)
  number             String   @db.VarChar(15)
  dateOfApplication  DateTime @map("date_of_application") @db.Date
  appliedMembership  String   @map("applied_membership") @db.VarChar(30)
  monthOfApplication String   @map("month_of_application") @db.VarChar(15)
  status             String   @default("pending") @db.VarChar(20) // pending, approved, rejected
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([status])
  @@map("member_registration")
}

model Member {
  id          Int      @id @default(autoincrement()) @map("member_id")
  firstName   String   @map("first_name") @db.VarChar(30)
  middleName  String?  @map("middle_name") @db.VarChar(30)
  lastName    String   @map("last_name") @db.VarChar(30)
  gender      String   @db.VarChar(10)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  email       String   @unique @db.VarChar(50)
  number      String   @db.VarChar(15)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  credentials                    MemberAccountCredentials?
  subscriptions                  MemberSubscription[]
  preferenceLogs                 MemberPreferenceLog[]
  personalizedPrograms           PersonalizedProgram[]
  standardProgramEnrollments     StandardProgramEnrollment[]
  personalizedProgramEnrollments PersonalizedProgramEnrollment[]
  personalizedProgressLogs       MemberPersonalizedProgressLog[]

  @@index([email])
  @@index([isActive])
  @@map("member")
}

model MemberAccountCredentials {
  id             Int       @id @default(autoincrement()) @map("member_account_credentials_id")
  memberId       Int       @unique @map("member_id")
  username       String    @unique @db.VarChar(30)
  hashedPassword String    @map("hashed_password") @db.VarChar(255)
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([username])
  @@map("member_account_credentials")
}

model MemberSubscription {
  id           Int      @id @default(autoincrement()) @map("subscription_id")
  memberId     Int      @map("member_id")
  membershipId Int      @map("membership_id")
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  status       String   @default("ACTIVE") @map("subscription_status") @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  member     Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id])

  @@index([memberId])
  @@index([membershipId])
  @@index([status])
  @@map("member_subscription")
}

model MemberPreferenceLog {
  id                   Int      @id @default(autoincrement()) @map("member_preference_log_id")
  memberId             Int      @map("member_id")
  goals                String   @db.Text
  recordedAvailability String   @map("recorded_availability") @db.VarChar(20)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@map("member_preference_log")
}

model Instructor {
  id          Int      @id @default(autoincrement()) @map("instructor_id")
  firstName   String   @map("first_name") @db.VarChar(30)
  middleName  String?  @map("middle_name") @db.VarChar(30)
  lastName    String   @map("last_name") @db.VarChar(30)
  gender      String   @db.VarChar(10)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  email       String   @unique @db.VarChar(50)
  number      String   @db.VarChar(15)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  credentials          InstructorAccountCredentials?
  personalizedPrograms PersonalizedProgram[]
  standardPrograms     StandardProgram[]

  @@index([email])
  @@index([isActive])
  @@map("instructor")
}

model InstructorAccountCredentials {
  id             Int       @id @default(autoincrement()) @map("instructor_account_credentials_id")
  instructorId   Int       @unique @map("instructor_id")
  username       String    @unique @db.VarChar(30)
  hashedPassword String    @map("hashed_password") @db.VarChar(255)
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  instructor Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@index([username])
  @@map("instructor_account_credentials")
}

model StandardProgram {
  id           Int      @id @default(autoincrement()) @map("standard_program_id")
  instructorId Int      @map("instructor_id")
  membershipId Int      @map("membership_id")
  name         String   @map("standard_program_name") @db.VarChar(50)
  description  String   @map("standard_program_description") @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  instructor  Instructor                  @relation(fields: [instructorId], references: [id])
  membership  Membership                  @relation(fields: [membershipId], references: [id])
  enrollments StandardProgramEnrollment[]

  @@index([instructorId])
  @@index([membershipId])
  @@index([isActive])
  @@map("standard_program")
}

model StandardProgramEnrollment {
  id                Int      @id @default(autoincrement()) @map("standard_program_enrollment_id")
  memberId          Int      @map("member_id")
  standardProgramId Int      @map("standard_program_id")
  goals             String   @db.Text
  startDate         DateTime @map("start_date") @db.Date
  endDate           DateTime @map("end_date") @db.Date
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  member          Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  standardProgram StandardProgram @relation(fields: [standardProgramId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([standardProgramId])
  @@index([isActive])
  @@map("standard_program_enrollment")
}

model PersonalizedProgram {
  id           Int      @id @default(autoincrement()) @map("personalized_program_id")
  memberId     Int      @map("member_id")
  instructorId Int      @map("instructor_id")
  name         String   @map("personalized_program_name") @db.VarChar(40)
  description  String   @map("personalized_program_description") @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  member      Member                          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  instructor  Instructor                      @relation(fields: [instructorId], references: [id])
  enrollments PersonalizedProgramEnrollment[]

  @@index([memberId])
  @@index([instructorId])
  @@index([isActive])
  @@map("personalized_program")
}

model PersonalizedProgramEnrollment {
  id                    Int      @id @default(autoincrement()) @map("personalized_program_enrollment_id")
  personalizedProgramId Int      @map("personalized_program_id")
  goals                 String   @db.Text
  startDate             DateTime @map("start_date") @db.Date
  endDate               DateTime @map("end_date") @db.Date
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  personalizedProgram PersonalizedProgram             @relation(fields: [personalizedProgramId], references: [id], onDelete: Cascade)
  progressLogs        MemberPersonalizedProgressLog[]
  Member              Member?                         @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  memberId            Int?

  @@index([personalizedProgramId])
  @@index([isActive])
  @@map("personalized_program_enrollment")
}

model MemberPersonalizedProgressLog {
  id                              Int      @id @default(autoincrement()) @map("member_personalized_progress_log_id")
  personalizedProgramEnrollmentId Int      @map("personalized_program_enrollment_id")
  progress                        String   @db.Text
  loggedAt                        DateTime @default(now()) @map("logged_at")
  createdAt                       DateTime @default(now()) @map("created_at")
  updatedAt                       DateTime @updatedAt @map("updated_at")

  // Relations
  personalizedProgramEnrollment PersonalizedProgramEnrollment @relation(fields: [personalizedProgramEnrollmentId], references: [id], onDelete: Cascade)
  Member                        Member?                       @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  memberId                      Int?

  @@index([personalizedProgramEnrollmentId])
  @@index([loggedAt])
  @@map("member_personalized_progress_log")
}

model Admin {
  id         Int      @id @default(autoincrement()) @map("admin_id")
  firstName  String   @map("first_name") @db.VarChar(30)
  middleName String?  @map("middle_name") @db.VarChar(30)
  lastName   String   @map("last_name") @db.VarChar(30)
  email      String   @unique @db.VarChar(50)
  role       String   @default("ADMIN") @db.VarChar(20)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  credentials AdminAccountCredentials?

  @@index([email])
  @@index([role])
  @@map("admin")
}

model AdminAccountCredentials {
  id             Int       @id @default(autoincrement()) @map("admin_account_credentials_id")
  adminId        Int       @unique @map("admin_id")
  username       String    @unique @db.VarChar(30)
  hashedPassword String    @map("hashed_password") @db.VarChar(255)
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([username])
  @@map("admin_account_credentials")
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  userType    String   @map("user_type") @db.VarChar(20)
  action      String   @db.VarChar(100)
  description String?  @db.Text
  ipAddress   String?  @map("ip_address") @db.VarChar(45)
  userAgent   String?  @map("user_agent") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId, userType])
  @@index([action])
  @@index([createdAt])
  @@map("activity_log")
}
